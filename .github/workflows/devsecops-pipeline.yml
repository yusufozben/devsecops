name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: us-central1-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY: devsecops-repo
  IMAGE_NAME: fastapi-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: gcp 
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pylint yapf pytest bandit safety

    # Code Quality and Linting
    - name: Run Pylint
      run: |
        pylint app/ --fail-under=8.0 --output-format=text --reports=y || exit 1

    - name: Check code formatting with yapf
      run: |
        yapf --diff --recursive app/ || exit 1

    # Unit Testing
    - name: Run unit tests
      run: |
        cd app && python -m pytest tests/ -v --tb=short --asyncio-mode=auto

    # Static Application Security Testing (SAST)
    - name: Run Bandit Security Scan
      run: |
        bandit -r app/ -f json -o bandit-report.json --severity-level MEDIUM || true
        bandit -r app/ -f txt --severity-level medium || exit 1

    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

    # Security Scanning
    - name: Security Scan with Semgrep
      run: |
        pip install semgrep
        semgrep --config=auto app/ --json --output=semgrep-results.json || true
        semgrep --config=auto app/ || exit 1

    # Secret Scanning
    - name: Run GitLeaks
      uses: zricethezav/gitleaks-action@master
      with:
        config-path: .gitleaks.toml

    # Build Container Image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

    # Container Vulnerability Scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Check if Trivy results exist
      id: check-trivy
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "trivy_exists=true" >> $GITHUB_OUTPUT
        else
          echo "trivy_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-trivy.outputs.trivy_exists == 'true'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    # Authenticate with Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

    # Push to Container Registry
    - name: Tag and push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    environment: gcp
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    # Corrected GKE credentials step
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
        location: ${{ secrets.GKE_CLUSTER_ZONE }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Deploy to Kubernetes
      run: |
        envsubst < k8s/deployment.yaml | kubectl apply --validate=false -f -
        kubectl apply --validate=false -f k8s/service.yaml
        kubectl rollout status deployment/fastapi-app
      env:
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY_URL: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}

    - name: Apply Gatekeeper Policies
      run: |
        kubectl apply -f k8s/gatekeeper/constraint-template.yaml
        kubectl apply -f k8s/gatekeeper/allowed-registries-constraint.yaml
